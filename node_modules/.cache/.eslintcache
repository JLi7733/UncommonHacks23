[{"C:\\Users\\jonat\\OneDrive\\Desktop\\University\\Code\\Uncommon Hacks 2023\\AnimeWordle\\anime-wordle\\src\\index.tsx":"1","C:\\Users\\jonat\\OneDrive\\Desktop\\University\\Code\\Uncommon Hacks 2023\\AnimeWordle\\anime-wordle\\src\\App.tsx":"2"},{"size":304,"mtime":1679763317603,"results":"3","hashOfConfig":"4"},{"size":1434,"mtime":1679775960219,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5nv2xb",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"C:\\Users\\jonat\\OneDrive\\Desktop\\University\\Code\\Uncommon Hacks 2023\\AnimeWordle\\anime-wordle\\src\\index.tsx",[],[],"C:\\Users\\jonat\\OneDrive\\Desktop\\University\\Code\\Uncommon Hacks 2023\\AnimeWordle\\anime-wordle\\src\\App.tsx",["13","14"],[],"import * as React from 'react';\nimport { useState, useEffect } from \"react\"\n\nexport default function App() {\n  const [solution, setSolution] = useState(\"FMA\");\n  const [previousGuesses, setPreviousGuesses] = useState([\"\"]);\n  const [guess, setGuess] = useState(\"\");\n  const [lastGuess, setLastGuess] = useState(guess);\n  const [tries, setTries] = useState(0);\n\n  function guessInput(event: { target: { value: React.SetStateAction<string>; }; }){\n    setGuess(event.target.value);\n  };\n\n  function onClick(){\n    setLastGuess(guess);\n    setTries(tries + 1);\n    setPreviousGuesses([...previousGuesses, guess])\n  };\n\n  if(lastGuess === solution){\n    return(\n     <div>\n      <p>You Win!</p>\n      <p>The solution was {solution}</p>\n     </div>\n    )\n  }\n\n  if(tries > 7){\n    return(\n      <div>\n      <p>Sorry, you lost</p>\n      <p>The solution was {solution}</p>\n    </div>\n    )\n  }\n\n  return (\n    <div className = \"App\">\n      <p>Anime Wordle</p>\n      <label>Guess your anime: </label>\n      <input type = \"text\" \n        id = \"guess\" \n        value = {guess} \n        onChange={guessInput}>\n      </input>\n      <button onClick={onClick}>Enter</button>\n      <p>You have guessed {tries} times</p>\n      <figure>Previous Guesses\n        <ul>\n          {previousGuesses.map((previousGuesses, index) => (\n            <li key = {index}>{previousGuesses}</li>\n          ))}\n        </ul>\n      </figure>\n      \n\n    </div>\n  );\n}\n\n",{"ruleId":"15","severity":1,"message":"16","line":2,"column":20,"nodeType":"17","messageId":"18","endLine":2,"endColumn":29},{"ruleId":"15","severity":1,"message":"19","line":5,"column":20,"nodeType":"17","messageId":"18","endLine":5,"endColumn":31},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setSolution' is assigned a value but never used."]